// This file is generated by transform.js.  DO NOT EDIT DIRECTLY.
module.exports = {
  name: 'vyper',
  conflicts: [
    [
      {
        type: 'SYMBOL',
        name: 'function_definition'
      },
      {
        type: 'SYMBOL',
        name: 'expression_statement'
      }
    ]
  ],
  supertypes: [
    {
      type: 'SYMBOL',
      name: '_simple_statement'
    },
    {
      type: 'SYMBOL',
      name: '_compound_statement'
    },
    {
      type: 'SYMBOL',
      name: 'expression'
    },
    {
      type: 'SYMBOL',
      name: 'primary_expression'
    },
    {
      type: 'SYMBOL',
      name: 'parameter'
    },
    {
      type: 'SYMBOL',
      name: 'vyper_decorator'
    },
    {
      type: 'SYMBOL',
      name: 'struct_definition'
    },
    {
      type: 'SYMBOL',
      name: 'event_definition'
    }
  ],
  inline: [
    {
      type: 'SYMBOL',
      name: '_simple_statement'
    },
    {
      type: 'SYMBOL',
      name: '_compound_statement'
    },
    {
      type: 'SYMBOL',
      name: '_suite'
    },
    {
      type: 'SYMBOL',
      name: '_expressions'
    },
    {
      type: 'SYMBOL',
      name: '_left_hand_side'
    },
    {
      type: 'SYMBOL',
      name: 'keyword_identifier'
    }
  ],
  word: {
    type: 'SYMBOL',
    name: 'identifier'
  },
  rules: {
    module: {
      type: 'REPEAT',
      content: {
        type: 'SYMBOL',
        name: '_statement'
      }
    },
    _simple_statements: {
      type: 'SEQ',
      members: [
        {
          type: 'SYMBOL',
          name: '_simple_statement'
        },
        {
          type: 'REPEAT',
          content: {
            type: 'SEQ',
            members: [
              {
                type: 'STRING',
                value: ';'
              },
              {
                type: 'SYMBOL',
                name: '_simple_statement'
              }
            ]
          }
        },
        {
          type: 'OPTIONAL',
          content: {
            type: 'STRING',
            value: ';'
          }
        },
        {
          type: 'SYMBOL',
          name: '_newline'
        }
      ]
    },
    import_statement: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: 'import'
        },
        {
          type: 'FIELD',
          name: 'name',
          content: {
            type: 'SYMBOL',
            name: 'dotted_name'
          }
        }
      ]
    },
    dotted_name: {
      type: 'PREC',
      prec: 1,
      content: {
        type: 'SEQ',
        members: [
          {
            type: 'SYMBOL',
            name: 'identifier'
          },
          {
            type: 'REPEAT',
            content: {
              type: 'SEQ',
              members: [
                {
                  type: 'STRING',
                  value: '.'
                },
                {
                  type: 'SYMBOL',
                  name: 'identifier'
                }
              ]
            }
          }
        ]
      }
    },
    print_statement: {
      type: 'SYMBOL',
      name: 'identifier'
    },
    if_statement: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: 'if'
        },
        {
          type: 'FIELD',
          name: 'condition',
          content: {
            type: 'SYMBOL',
            name: 'expression'
          }
        },
        {
          type: 'STRING',
          value: ':'
        },
        {
          type: 'FIELD',
          name: 'consequence',
          content: {
            type: 'SYMBOL',
            name: '_suite'
          }
        },
        {
          type: 'OPTIONAL',
          name: 'alternative',
          content: {
            type: 'SYMBOL',
            name: 'else_clause'
          }
        }
      ]
    },
    else_clause: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: 'else'
        },
        {
          type: 'STRING',
          value: ':'
        },
        {
          type: 'FIELD',
          name: 'body',
          content: {
            type: 'SYMBOL',
            name: '_suite'
          }
        }
      ]
    },
    function_definition: {
      type: 'SEQ',
      members: [
        {
          type: 'REPEAT',
          content: {
            type: 'SYMBOL',
            name: 'vyper_decorator'
          }
        },
        {
          type: 'STRING',
          value: 'def'
        },
        {
          type: 'FIELD',
          name: 'name',
          content: {
            type: 'SYMBOL',
            name: 'identifier'
          }
        },
        {
          type: 'FIELD',
          name: 'parameters',
          content: {
            type: 'SYMBOL',
            name: 'parameters'
          }
        },
        {
          type: 'OPTIONAL',
          content: {
            type: 'SEQ',
            members: [
              {
                type: 'STRING',
                value: '->'
              },
              {
                type: 'FIELD',
                name: 'return_type',
                content: {
                  type: 'SYMBOL',
                  name: 'type'
                }
              }
            ]
          }
        },
        {
          type: 'STRING',
          value: ':'
        },
        {
          type: 'FIELD',
          name: 'body',
          content: {
            type: 'SYMBOL',
            name: '_suite'
          }
        }
      ]
    },
    parameters: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: '('
        },
        {
          type: 'OPTIONAL',
          content: {
            type: 'SYMBOL',
            name: '_parameters'
          }
        },
        {
          type: 'STRING',
          value: ')'
        }
      ]
    },
    _parameters: {
      type: 'SEQ',
      members: [
        {
          type: 'SYMBOL',
          name: 'parameter'
        },
        {
          type: 'REPEAT',
          content: {
            type: 'SEQ',
            members: [
              {
                type: 'STRING',
                value: ','
              },
              {
                type: 'SYMBOL',
                name: 'parameter'
              }
            ]
          }
        },
        {
          type: 'OPTIONAL',
          content: {
            type: 'STRING',
            value: ','
          }
        }
      ]
    },
    parameter: {
      type: 'SEQ',
      members: [
        {
          type: 'FIELD',
          name: 'name',
          content: {
            type: 'SYMBOL',
            name: 'identifier'
          }
        },
        {
          type: 'STRING',
          value: ':'
        },
        {
          type: 'FIELD',
          name: 'type',
          content: {
            type: 'SYMBOL',
            name: 'type'
          }
        }
      ]
    },
    _suite: {
      type: 'CHOICE',
      members: [
        {
          type: 'ALIAS',
          content: {
            type: 'SYMBOL',
            name: '_simple_statements'
          },
          named: true,
          value: 'block'
        },
        {
          type: 'SEQ',
          members: [
            {
              type: 'SYMBOL',
              name: '_indent'
            },
            {
              type: 'SYMBOL',
              name: 'block'
            }
          ]
        },
        {
          type: 'ALIAS',
          content: {
            type: 'SYMBOL',
            name: '_newline'
          },
          named: true,
          value: 'block'
        }
      ]
    },
    block: {
      type: 'SEQ',
      members: [
        {
          type: 'REPEAT',
          content: {
            type: 'SYMBOL',
            name: '_statement'
          }
        },
        {
          type: 'SYMBOL',
          name: '_dedent'
        }
      ]
    },
    identifier: {
      type: 'PATTERN',
      value: /[_\p{XID_Start}][_\p{XID_Continue}]*/
    },
    keyword_identifier: {
      type: 'CHOICE',
      members: [
        {
          type: 'PREC',
          prec: -3,
          content: {
            type: 'ALIAS',
            content: {
              type: 'CHOICE',
              members: [
                {
                  type: 'STRING',
                  value: 'print'
                },
                {
                  type: 'STRING',
                  value: 'exec'
                },
                {
                  type: 'STRING',
                  value: 'async'
                },
                {
                  type: 'STRING',
                  value: 'await'
                }
              ]
            },
            named: true,
            value: 'identifier'
          }
        },
        {
          type: 'ALIAS',
          content: {
            type: 'CHOICE',
            members: [
              {
                type: 'STRING',
                value: 'type'
              },
              {
                type: 'STRING',
                value: 'match'
              }
            ]
          },
          named: true,
          value: 'identifier'
        }
      ]
    },
    true: {
      type: 'STRING',
      value: 'True'
    },
    false: {
      type: 'STRING',
      value: 'False'
    },
    none: {
      type: 'STRING',
      value: 'None'
    },
    line_continuation: {
      type: 'TOKEN',
      content: {
        type: 'SEQ',
        members: [
          {
            type: 'STRING',
            value: '\\'
          },
          {
            type: 'CHOICE',
            members: [
              {
                type: 'SEQ',
                members: [
                  {
                    type: 'OPTIONAL',
                    content: {
                      type: 'STRING',
                      value: '\r'
                    }
                  },
                  {
                    type: 'STRING',
                    value: '\n'
                  }
                ]
              },
              {
                type: 'STRING',
                value: '\0'
              }
            ]
          }
        ]
      }
    },
    type: {
      type: 'CHOICE',
      members: [
        {
          type: 'SYMBOL',
          name: 'primitive_type'
        },
        {
          type: 'SYMBOL',
          name: 'mapping_type'
        },
        {
          type: 'SYMBOL',
          name: 'array_type'
        },
        {
          type: 'SYMBOL',
          name: 'struct_type'
        },
        {
          type: 'SYMBOL',
          name: 'tuple_type'
        }
      ]
    },
    primitive_type: {
      type: 'CHOICE',
      members: [
        {
          type: 'STRING',
          value: 'uint8'
        },
        {
          type: 'STRING',
          value: 'uint16'
        },
        {
          type: 'STRING',
          value: 'uint32'
        },
        {
          type: 'STRING',
          value: 'uint64'
        },
        {
          type: 'STRING',
          value: 'uint128'
        },
        {
          type: 'STRING',
          value: 'uint256'
        },
        {
          type: 'STRING',
          value: 'int8'
        },
        {
          type: 'STRING',
          value: 'int16',
        // (Continuing from the previous response, inside the generated grammar.js)
          type: 'STRING',
          value: 'int32'
        },
        {
          type: 'STRING',
          value: 'int64'
        },
        {
          type: 'STRING',
          value: 'int128'
        },
        {
          type: 'STRING',
          value: 'int256'
        },
        {
          type: 'STRING',
          value: 'bool'
        },
        {
          type: 'STRING',
          value: 'address'
        },
        {
          type: 'STRING',
          value: 'bytes32'
        },
        {
          type: 'STRING',
          value: 'decimal'
        },
        {
          type: 'STRING',
          value: 'bytes'
        },
        {
          type: 'STRING',
          value: 'string'
        }
      ]
    },
    mapping_type: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: 'HashMap'
        },
        {
          type: 'STRING',
          value: '['
        },
        {
          type: 'FIELD',
          name: 'key_type',
          content: {
            type: 'SYMBOL',
            name: 'type'
          }
        },
        {
          type: 'STRING',
          value: ','
        },
        {
          type: 'FIELD',
          name: 'value_type',
          content: {
            type: 'SYMBOL',
            name: 'type'
          }
        },
        {
          type: 'STRING',
          value: ']'
        }
      ]
    },
    array_type: {
      type: 'SEQ',
      members: [
        {
          type: 'FIELD',
          name: 'base_type',
          content: {
            type: 'SYMBOL',
            name: 'type'
          }
        },
        {
          type: 'STRING',
          value: '['
        },
        {
          type: 'FIELD',
          name: 'size',
          content: {
            type: 'CHOICE',
            members: [
              {
                type: 'SYMBOL',
                name: 'integer'
              },
              {
                type: 'SYMBOL',
                name: 'identifier'
              }
            ]
          }
        },
        {
          type: 'STRING',
          value: ']'
        }
      ]
    },
    struct_type: {
      type: 'SYMBOL',
      name: 'identifier'
    },
    tuple_type: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: '('
        },
        {
          type: 'FIELD',
          name: 'members',
          content: {
            type: 'SEQ',
            members: [
              {
                type: 'SYMBOL',
                name: 'type'
              },
              {
                type: 'REPEAT',
                content: {
                  type: 'SEQ',
                  members: [
                    {
                      type: 'STRING',
                      value: ','
                    },
                    {
                      type: 'SYMBOL',
                      name: 'type'
                    }
                  ]
                }
              },
              {
                type: 'OPTIONAL',
                content: {
                  type: 'STRING',
                  value: ','
                }
              }
            ]
          }
        },
        {
          type: 'STRING',
          value: ')'
        }
      ]
    },
    vyper_decorator: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: '@'
        },
        {
          type: 'FIELD',
          name: 'name',
          content: {
            type: 'SYMBOL',
            name: 'decorator_name'
          }
        },
        {
          type: 'OPTIONAL',
          name: 'arguments',
          content: {
            type: 'SYMBOL',
            name: 'decorator_arguments'
          }
        }
      ]
    },
    decorator_name: {
      type: 'CHOICE',
      members: [
        {
          type: 'STRING',
          value: 'external'
        },
        {
          type: 'STRING',
          value: 'internal'
        },
        {
          type: 'STRING',
          value: 'view'
        },
        {
          type: 'STRING',
          value: 'pure'
        },
        {
          type: 'STRING',
          value: 'payable'
        },
        {
          type: 'STRING',
          value: 'nonreentrant'
        }
      ]
    },
    decorator_arguments: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: '('
        },
        {
          type: 'FIELD',
          name: 'argument',
          content: {
            type: 'SYMBOL',
            name: 'string'
          }
        },
        {
          type: 'STRING',
          value: ')'
        }
      ]
    },
    contract_definition: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: 'contract'
        },
        {
          type: 'FIELD',
          name: 'name',
          content: {
            type: 'SYMBOL',
            name: 'identifier'
          }
        },
        {
          type: 'STRING',
          value: ':'
        },
        {
          type: 'FIELD',
          name: 'body',
          content: {
            type: 'SYMBOL',
            name: '_suite'
          }
        }
      ]
    },
    builtin_function_or_method: {
        type: 'STRING', value: 'selfdestruct'
    },
    builtin_variable: {
        type: 'STRING', value: 'msg.sender'
    },
    struct_definition: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: 'struct'
        },
        {
          type: 'FIELD',
          name: 'name',
          content: {
            type: 'SYMBOL',
            name: 'identifier'
          }
        },
        {
          type: 'STRING',
          value: ':'
        },
        {
          type: 'FIELD',
          name: 'body',
          content: {
            type: 'SYMBOL',
            name: '_struct_member_block'
          }
        }
      ]
    },
    '_struct_member_block': {
        type: 'CHOICE',
        members:[
            {
                type: 'SEQ',
                members:[
                    {type: 'SYMBOL', name: '_indent'},
                    {type: 'REPEAT', content: {type: 'SYMBOL', name: 'struct_member'}},
                    {type: 'SYMBOL', name: '_dedent'},
                ]
            },
            {type: 'SYMBOL', name: '_newline'} //Handle empty struct
        ]

    },
    struct_member: {
      type: 'SEQ',
      members: [
        {
          type: 'FIELD',
          name: 'name',
          content: {
            type: 'SYMBOL',
            name: 'identifier'
          }
        },
        {
          type: 'STRING',
          value: ':'
        },
        {
          type: 'FIELD',
          name: 'type',
          content: {
            type: 'SYMBOL',
            name: 'type'
          }
        },
        {
            type: 'SYMBOL',
            name: '_newline'
        }
      ]
    },
    event_definition: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: 'event'
        },
        {
          type: 'FIELD',
          name: 'name',
          content: {
            type: 'SYMBOL',
            name: 'identifier'
          }
        },
        {
          type: 'STRING',
          value: ':'
        },
        {
          type: 'FIELD',
          name: 'body',
          content: {
            type: 'SYMBOL',
            name: '_event_member_block'
          }
        }
      ]
    },
    '_event_member_block': {
        type: 'CHOICE',
        members:[
            {
                type: 'SEQ',
                members:[
                    {type: 'SYMBOL', name: '_indent'},
                    {type: 'REPEAT', content: {type: 'SYMBOL', name: 'event_member'}},
                    {type: 'SYMBOL', name: '_dedent'},
                ]
            },
            {type: 'SYMBOL', name: '_newline'} //Handle empty struct
        ]
    },
    event_member: {
      type: 'SEQ',
      members: [
        {
          type: 'FIELD',
          name: 'name',
          content: {
            type: 'SYMBOL',
            name: 'identifier'
          }
        },
        {
          type: 'STRING',
          value: ':'
        },
        {
          type: 'FIELD',
          name: 'type',
          content: {
            type: 'SYMBOL',
            name: 'type'
          }
        },
        {
          type: 'SYMBOL',
          name: '_newline'
        }
      ]
    },
    expression: {
      type: 'CHOICE',
      members: [
        {
          type: 'SYMBOL',
          name: 'primary_expression'
        },
        {
          type: 'SYMBOL',
          name: 'boolean_expression'
        },
        {
          type: 'SYMBOL',
          name: 'binary_expression'
        },
        {
          type: 'SYMBOL',
          name: 'unary_expression'
        },
        {
          type: 'SYMBOL',
          name: 'comparison_expression'
        },
        {
            type: 'SYMBOL',
            name: 'call'
        },
        {
            type: 'SYMBOL',
            name: 'attribute'
        },
        {
            type: 'SYMBOL',
            name: 'subscript'
        }
      ]
    },
    primary_expression: {
      type: 'CHOICE',
      members: [
        {
          type: 'SYMBOL',
          name: 'number'
        },
        {
          type: 'SYMBOL',
          name: 'string'
        },
        {
          type: 'SYMBOL',
          name: 'true'
        },
        {
          type: 'SYMBOL',
          name: 'false'
        },
        {
          type: 'SYMBOL',
          name: 'none'
        },
        {
          type: 'SYMBOL',
          name: 'identifier'
        },
        {
          type: 'SYMBOL',
          name: 'builtin_variable'
        },
        {
            type: 'SYMBOL',
            name: 'builtin_function_or_method'
        },
        {
          type: 'STRING',
          value: 'self'
        },
        {
          type: 'SYMBOL',
          name: 'parenthesized_expression'
        },
        {
            type: 'SYMBOL',
            name: 'decorator_name'
        }
      ]
    },
    parenthesized_expression: {
      type: 'SEQ',
      members: [
        {
          type: 'STRING',
          value: '('
        },
        {
          type: 'SYMBOL',
          name: 'expression'
        },
        {
          type: 'STRING',
          value: ')'
        }
      ]
    },
    boolean_expression: {
      type: 'CHOICE',
      members: [
        {
          type: 'SEQ',
          members: [
            {
              type: 'FIELD',
              name: 'left',
              content: {
                type: 'SYMBOL',
                name: 'expression'
              }
            },
            {
              type: 'FIELD',
              name: 'operator',
              content: {
                type: 'STRING',
                value: 'and'
              }
            },
            {
              type: 'FIELD',
              name: 'right',
              content: {
                type: 'SYMBOL',
                name: 'expression'
              }
            }
          ]
        },
        {
          type: 'SEQ',
          members: [
            {
              type: 'FIELD',
              name: 'left',
              content: {
                type: 'SYMBOL',
                name: 'expression'
              }
            },
            {
              type: 'FIELD',
              name: 'operator',
              content: {
                type: 'STRING',
                value: 'or'
              }
            },
            {
              type: 'FIELD',
              name: 'right',
              content: {
                type: 'SYMBOL',
                name: 'expression'
              }
            }
          ]
        }
      ]
    },
    binary_expression: {
      type: 'SEQ',
      members: [
        {
          type: 'FIELD',
          name: 'left',
          content: {
            type: 'SYMBOL',
            name: 'expression'
          }
        },
        {
          type: 'FIELD',
          name: 'operator',
          content: {
            type: 'CHOICE',
            members: [
              {
                type: 'STRING',
                value: '+'
              },
              {
                type: 'STRING',
                value: '-'
              },
              {
                type: 'STRING',
                value: '*'
              },
              {
                type: 'STRING',
                value: '/'
              },
              {
                type: 'STRING',
                value: '%'
              },
              {
                type: 'STRING',
                value: '**'
              },
              {
                type: 'STRING',
                value: '<<'
              },
              {
                type: 'STRING',
                value: '>>'
              },
              {
                type: 'STRING',
                value: '&'
              },
              {
                type: 'STRING',
                value: '|'
              },
              {
                type: 'STRING',
                value: '^'
              }
            ]
          }
        },
        {
          type: 'FIELD',
          name: 'right',
          content: {
            type: 'SYMBOL',
            name: 'expression'
          }
        }
      ]
    },
    unary_expression: {
      type: 'SEQ',
      members: [
        {
          type: 'FIELD',
          name: 'operator',
          content: {
            type: 'CHOICE',
            members: [
              {
                type: 'STRING',
                value: '+'
              },
              {
                type: 'STRING',
                value: '-'
              },
              {
                type: 'STRING',
                value: '~'
              },
              {
                type: 'STRING',
                value: 'not'
              }
            ]
          }
        },
        {
          type: 'FIELD',
          name: 'argument',
          content: {
            type: 'SYMBOL',
            name: 'expression'
          }
        }
      ]
    },
    comparison_expression: {
      type: 'SEQ',
      members: [
        {
          type: 'FIELD',
          name: 'left',
          content: {
            type: 'SYMBOL',
            name: 'expression'
          }
        },
        {
          type: 'FIELD',
          name: 'operator',
          content: {
            type: 'CHOICE',
            members: [
              {
                type: 'STRING',
                value: '<'
              },
              {
                type: 'STRING',
                value: '<='
              },
              {
                type: 'STRING',
                value: '=='
              },
              {
                type: 'STRING',
                value: '!='
              },
              {
                type: 'STRING',
                value: '>='
              },
              {
                type: 'STRING',
                value: '>'
              },
              {
                type: 'STRING',
                value: 'is'
              }
            ]
          }
        },
        {
          type: 'FIELD',
          name: 'right',
          content: {
            type: 'SYMBOL',
            name: 'expression'
          }
        }
      ]
    },
    call: {
        type: 'SEQ',
        members:[
            {type: 'FIELD', name: 'function', content: {type: 'SYMBOL', name: 'primary_expression'}},
            {type: 'FIELD', name: 'arguments', content: {type: 'SYMBOL', name: 'arguments'}}
        ]
    },
    arguments: {
        type: 'SEQ',
        members:[
            {type: 'STRING', value: '('},
            {type: 'OPTIONAL', content: {type: 'SYMBOL', name: '_arg_list'}},
            {type: 'STRING', value: ')'}
        ]
    },
    '_arg_list': {
        type: 'SEQ',
        members:[
            {type: 'SYMBOL', name: 'expression'},
            {type: 'REPEAT', content: {
                type: 'SEQ',
                members:[
                    {type: 'STRING', value: ','},
                    {type: 'SYMBOL', name: 'expression'}
                ]
            }},
                {
                type: 'OPTIONAL',
                content: {type: 'STRING', value: ','}
            }
        ]
    },
    attribute: {
      type: 'SEQ',
      members: [
        {
          type: 'FIELD',
          name: 'object',
          content: {
            type: 'SYMBOL',
            name: 'primary_expression'
          }
        },
        {
          type: 'STRING',
          value: '.'
        },
        {
          type: 'FIELD',
          name: 'attribute',
          content: {
            type: 'SYMBOL',
            name: 'identifier'
          }
        }
      ]
    },
    subscript: {
      type: 'SEQ',
      members: [
        {
          type: 'FIELD',
          name: 'value',
          content: {
            type: 'SYMBOL',
            name: 'primary_expression'
          }
        },
        {
          type: 'STRING',
          value: '['
        },
        {
          type: 'FIELD',
          name: 'index',
          content: {
            type: 'SYMBOL',
            name: 'expression'
          }
        },
        {
          type: 'STRING',
          value: ']'
        }
      ]
    },

    //Composite number type
    number: {
        type: 'CHOICE',
        members:[
            {type: 'SYMBOL', name: 'integer'},
            {type: 'SYMBOL', name: 'float'}
        ]
    },

    _statement: {
        type: 'CHOICE',
        members:[
            {type: 'SYMBOL', name: '_simple_statement'},
            {type: 'SYMBOL', name: '_compound_statement'}
        ]
    },

    _simple_statement: {
        type: 'CHOICE',
        members:[
            {type: 'SYMBOL', name: 'expression_statement'},
            { type: 'SYMBOL', name: 'assignment_statement' },
        ]
    },

    expression_statement: {
      type: 'SYMBOL',
      name: 'expression'
    },

    assignment_statement: {
    type: 'SEQ',
    members: [
      {
        type: 'FIELD',
        name: 'left',
        content: {
          type: 'SYMBOL',
          name: 'identifier'
        }
      },
      {
        type: 'STRING',
        value: '='
      },
      {
        type: 'FIELD',
        name: 'right',
        content: {
          type: 'SYMBOL',
          name: 'expression'
        }
      }
    ]
    },
    _compound_statement: {
        type: 'CHOICE',
        members:[
          {type: 'SYMBOL', name: 'if_statement'},
          {type: 'SYMBOL', name: 'for_statement'},
          {type: 'SYMBOL', name: 'function_definition'},
          {type: 'SYMBOL', name: 'contract_definition'},
          {type: 'SYMBOL', name: 'struct_definition'},
          {type: 'SYMBOL', name: 'event_definition'}
        ]
    },
    for_statement: {
        type: 'SEQ',
        members:[
            {type: 'STRING', value: 'for'},
            {type: 'FIELD', name: 'left', content: {type: 'SYMBOL', name: 'identifier'}},
            {type: 'STRING', value: 'in'},
            {type: 'FIELD', name: 'right', content: {
                type: 'SEQ',
                members:[
                    {type: 'SYMBOL', name: 'identifier'}, // The start variable.
                    {type: 'STRING', value: 'range'},
                    {type: 'SYMBOL', name: 'arguments'}
                ]
            }},
            {type: 'STRING', value: ':'},
            {type: 'FIELD', name: 'body', content: {type: 'SYMBOL', name: '_suite'}},
        ]
    },
    concatenated_string: {
      type: 'SEQ',
      members: [
        {
          type: 'SYMBOL',
          name: 'string'
        },
        {
          type: 'REPEAT1',
          content: {
            type: 'SYMBOL',
            name: 'string'
          }
        }
      ]
    },
    string: {
      type: 'SEQ',
      members: [
        {
          type: 'SYMBOL',
          name: 'string_start'
        },
        {
          type: 'REPEAT',
          content: {
            type: 'SYMBOL',
            name: '_string_content'
          }
        },
        {
          type: 'SYMBOL',
          name: 'string_end'
        }
      ]
    },
    integer: {
      type: 'TOKEN',
      content: {
        type: 'CHOICE',
        members: [
          {
            type: 'SEQ',
            members: [
              {
                type: 'CHOICE',
                members: [
                  {
                    type: 'STRING',
                    value: '0x'
                  },
                  {
                    type: 'STRING',
                    value: '0X'
                  }
                ]
              },
              {
                type: 'REPEAT1',
                content: {
                  type: 'PATTERN',
                  value: /_?[A-Fa-f0-9]+/
                }
              },
              {
                type: 'OPTIONAL',
                content: {
                  type: 'PATTERN',
                  value: /[Ll]/
                }
              }
            ]
          },
          {
            type: 'SEQ',
            members: [
              {
                type: 'CHOICE',
                members: [
                  {
                    type: 'STRING',
                    value: '0o'
                  },
                  {
                    type: 'STRING',
                    value: '0O'
                  }
                ]
              },
              {
                type: 'REPEAT1',
                content: {
                  type: 'PATTERN',
                  value: /_?[0-7]+/
                }
              },
              {
                type: 'OPTIONAL',
                content: {
                  type: 'PATTERN',
                  value: /[Ll]/
                }
              }
            ]
          },
          {
            type: 'SEQ',
            members: [
              {
                type: 'CHOICE',
                members: [
                  {
                    type: 'STRING',
                    value: '0b'
                  },
                  {
                    type: 'STRING',
                    value: '0B'
                  }
                ]
              },
              {
                type: 'REPEAT1',
                content: {
                  type: 'PATTERN',
                  value: /_?[0-1]+/
                }
              },
              {
                type: 'OPTIONAL',
                content: {
                  type: 'PATTERN',
                  value: /[Ll]/
                }
              }
            ]
          },
          {
            type: 'SEQ',
            members: [
              {
                type: 'REPEAT1',
                content: {
                  type: 'PATTERN',
                  value: /[0-9]+_?/
                }
              },
              {
                type: 'CHOICE',
                members: [
                  {
                    type: 'OPTIONAL',
                    content: {
                      type: 'PATTERN',
                      value: /[Ll]/
                    }
                  },
                  {
                    type: 'OPTIONAL',
                    content: {
                      type: 'PATTERN',
                      value: /[jJ]/
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    float: {
      type: 'TOKEN',
      content: {
        type: 'SEQ',
        members: [
          {
            type: 'CHOICE',
            members: [
              {
                type: 'SEQ',
                members: [
                  {
                    type: 'REPEAT1',
                    content: {
                      type: 'PATTERN',
                      value: /[0-9]+_?/
                    }
                  },
                  {
                    type: 'STRING',
                    value: '.'
                  },
                  {
                    type: 'OPTIONAL',
                    content: {
                      type: 'REPEAT1',
                      content: {
                        type: 'PATTERN',
                        value: /[0-9]+_?/
                      }
                    }
                  },
                  {
                    type: 'OPTIONAL',
                    content: {
                      type: 'SEQ',
                      members: [
                        {
                          type: 'PATTERN',
                          value: /[eE][\+-]?/
                        },
                        {
                          type: 'REPEAT1',
                          content: {
                            type: 'PATTERN',
                            value: /[0-9]+_?/
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              {
                type: 'SEQ',
                members: [
                  {
                    type: 'OPTIONAL',
                    content: {
                      type: 'REPEAT1',
                      content: {
                        type: 'PATTERN',
                        value: /[0-9]+_?/
                      }
                    }
                  },
                  {
                    type: 'STRING',
                    value: '.'
                  },
                  {
                    type: 'REPEAT1',
                    content: {
                      type: 'PATTERN',
                      value: /[0-9]+_?/
                    }
                  },
                  {
                    type: 'OPTIONAL',
                    content: {
                      type: 'SEQ',
                      members: [
                        {
                          type: 'PATTERN',
                          value: /[eE][\+-]?/
                        },
                        {
                          type: 'REPEAT1',
                          content: {
                            type: 'PATTERN',
                            value: /[0-9]+_?/
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              {
                type: 'SEQ',
                members: [
                  {
                    type: 'REPEAT1',
                    content: {
                      type: 'PATTERN',
                      value: /[0-9]+_?/
                    }
                  },
                  {
                    type: 'SEQ',
                    members: [
                      {
                        type: 'PATTERN',
                        value: /[eE][\+-]?/
                      },
                      {
                        type: 'REPEAT1',
                        content: {
                          type: 'PATTERN',
                          value: /[0-9]+_?/
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            type: 'OPTIONAL',
            content: {
              type: 'PATTERN',
              value: /[jJ]/
            }
          }
        ]
      }
    }
  }
};