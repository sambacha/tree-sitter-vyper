// modules/01_remove_features.js

module.exports = function (grammar, utils) {
    const { removeRule } = utils;
    
    // Define a helper function to safely remove rules
    const safeRemoveRule = (ruleName) => {
        const rules = grammar.rules || (grammar.definition && grammar.definition.rules) || {};
        if (rules.hasOwnProperty(ruleName)) {
            removeRule(grammar, ruleName);
        }
    };
    
    // Now use the safe version for all rule removals
    safeRemoveRule('class_definition');
    safeRemoveRule('decorated_definition');
    safeRemoveRule('decorator');
    safeRemoveRule('future_import_statement');
   // safeRemoveRule('import_from_statement');
    safeRemoveRule('wildcard_import');
    safeRemoveRule('aliased_import');
    safeRemoveRule('relative_import');
    safeRemoveRule('try_statement');
    safeRemoveRule('except_clause');
    safeRemoveRule('finally_clause');
    safeRemoveRule('raise_statement');
    safeRemoveRule('yield');
    safeRemoveRule('generator_expression');
    safeRemoveRule('exec_statement');
    safeRemoveRule('global_statement');
    safeRemoveRule('nonlocal_statement');
    safeRemoveRule('async');
    safeRemoveRule('await');
    safeRemoveRule('list_comprehension');
    safeRemoveRule('dictionary_comprehension');
    safeRemoveRule('set_comprehension');
    safeRemoveRule('match_statement');
    safeRemoveRule('case_clause');
    safeRemoveRule('type_alias_statement');
    safeRemoveRule('chevron');
    safeRemoveRule('_not_in');
    safeRemoveRule('_is_not');
    safeRemoveRule('keyword_separator');
    safeRemoveRule('positional_separator');
    safeRemoveRule('dictionary_splat_pattern');
    safeRemoveRule('except_group_clause');
    safeRemoveRule('with_statement');
    safeRemoveRule('with_clause');
    safeRemoveRule('with_item');
    safeRemoveRule('lambda_within_for_in_clause');
    safeRemoveRule('for_in_clause');
    safeRemoveRule('union_pattern');
    safeRemoveRule('splat_pattern');
    safeRemoveRule('class_pattern');
    safeRemoveRule('complex_pattern');
    safeRemoveRule('_as_pattern');
    safeRemoveRule('keyword_pattern');
    safeRemoveRule('dict_pattern');
    safeRemoveRule('_key_value_pattern');
    safeRemoveRule('_tuple_pattern');
    safeRemoveRule('_list_pattern');
    safeRemoveRule('escape_interpolation');
    safeRemoveRule('escape_sequence');
    safeRemoveRule('_not_escape_sequence');
    safeRemoveRule('format_specifier');
    safeRemoveRule('type_conversion');
    safeRemoveRule('_f_expression');
    safeRemoveRule('interpolation');
    safeRemoveRule('dictionary_splat');
    safeRemoveRule('parenthesized_list_splat');
    safeRemoveRule('list_splat');
    safeRemoveRule('splat_type');
    safeRemoveRule('generic_type');
    safeRemoveRule('union_type');
    safeRemoveRule('constrained_type');
    safeRemoveRule('member_type');
    safeRemoveRule('pattern_list');
    safeRemoveRule('_named_expression_lhs');
    safeRemoveRule('named_expression');
    safeRemoveRule('type_parameter');
    safeRemoveRule('elif_clause');
    safeRemoveRule('boolean_operator');
    safeRemoveRule('unary_operator');
    safeRemoveRule('binary_operator');
    safeRemoveRule('lambda');
    safeRemoveRule('conditional_expression');
    safeRemoveRule('keyword_argument');
    safeRemoveRule('pair');
    safeRemoveRule('expression_list');
    safeRemoveRule('_collection_elements');
    safeRemoveRule('slice');
    safeRemoveRule('subscript');
    safeRemoveRule('attribute');
    safeRemoveRule('list_splat_pattern');
    safeRemoveRule('tuple_pattern');
    safeRemoveRule('list_pattern');
    safeRemoveRule('default_parameter');
    safeRemoveRule('typed_default_parameter');
    safeRemoveRule('_left_hand_side');
    safeRemoveRule('pattern');
    safeRemoveRule('as_pattern');
    safeRemoveRule('assignment');
    safeRemoveRule('augmented_assignment');
    safeRemoveRule('comparison_operator');
    safeRemoveRule('_expressions');
    safeRemoveRule('return_statement');
    safeRemoveRule('delete_statement');
    safeRemoveRule('pass_statement');
    safeRemoveRule('break_statement');
    safeRemoveRule('continue_statement');
    safeRemoveRule('list');
    safeRemoveRule('set');
    safeRemoveRule('tuple');
    safeRemoveRule('dictionary');
    safeRemoveRule('assert_statement');
    safeRemoveRule('_right_hand_side');
    safeRemoveRule('argument_list');
    safeRemoveRule('call');
    
    return grammar;
};
