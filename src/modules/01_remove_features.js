// modules/01_remove_features.js
//const { removeRule } = require('./utils'); //<- Remove this

module.exports = function (grammar, utils) { //Pass in utils
    const { removeRule } = utils;
    removeRule(grammar, 'class_definition');
    removeRule(grammar, 'decorated_definition');
    removeRule(grammar, 'decorator');
    removeRule(grammar, 'future_import_statement');
    removeRule(grammar, 'import_from_statement');
    removeRule(grammar, 'wildcard_import');
    removeRule(grammar, 'aliased_import');
    removeRule(grammar, 'relative_import');
    removeRule(grammar, 'try_statement');
    removeRule(grammar, 'except_clause');
    removeRule(grammar, 'finally_clause');
    removeRule(grammar, 'raise_statement');
    removeRule(grammar, 'yield');
    removeRule(grammar, 'generator_expression');
    removeRule(grammar, 'exec_statement');
    removeRule(grammar, 'global_statement');
    removeRule(grammar, 'nonlocal_statement');
    removeRule(grammar, 'async');
    removeRule(grammar, 'await');
    removeRule(grammar, 'list_comprehension');
    removeRule(grammar, 'dictionary_comprehension');
    removeRule(grammar, 'set_comprehension');
    removeRule(grammar, 'match_statement');
    removeRule(grammar, 'case_clause');
    removeRule(grammar, 'type_alias_statement');
    removeRule(grammar, 'chevron');
    removeRule(grammar, '_not_in');
    removeRule(grammar, '_is_not');
    removeRule(grammar, 'keyword_separator');
    removeRule(grammar, 'positional_separator');
    removeRule(grammar, 'dictionary_splat_pattern');
    removeRule(grammar, 'except_group_clause');
    removeRule(grammar, 'with_statement');
    removeRule(grammar, 'with_clause');
    removeRule(grammar, 'with_item');
    removeRule(grammar, 'lambda_within_for_in_clause');
    removeRule(grammar, 'for_in_clause');
    removeRule(grammar, 'union_pattern');
    removeRule(grammar, 'splat_pattern');
    removeRule(grammar, 'class_pattern');
    removeRule(grammar, 'complex_pattern');
    removeRule(grammar, '_as_pattern');
    removeRule(grammar, 'keyword_pattern');
    removeRule(grammar, 'dict_pattern');
    removeRule(grammar, '_key_value_pattern');
    removeRule(grammar, '_tuple_pattern');
    removeRule(grammar, '_list_pattern');
    removeRule(grammar, 'escape_interpolation');
    removeRule(grammar, 'escape_sequence');
    removeRule(grammar, '_not_escape_sequence');
    removeRule(grammar, 'format_specifier');
    removeRule(grammar, 'type_conversion');
    removeRule(grammar, '_f_expression');
    removeRule(grammar, 'interpolation');
    removeRule(grammar, 'dictionary_splat');
    removeRule(grammar, 'parenthesized_list_splat');
    removeRule(grammar, 'list_splat');
    removeRule(grammar, 'splat_type');
    removeRule(grammar, 'generic_type');
    removeRule(grammar, 'union_type');
    removeRule(grammar, 'constrained_type');
    removeRule(grammar, 'member_type');
    removeRule(grammar, 'pattern_list');
    removeRule(grammar, '_named_expression_lhs');
    removeRule(grammar, 'named_expression');
    removeRule(grammar, 'type_parameter');
    removeRule(grammar, 'elif_clause'); //Keep else and if, but not elif
    removeRule(grammar, 'boolean_operator'); //Vyper uses and, or, not keywords
    removeRule(grammar, 'unary_operator'); //Vyper uses the ~ operator
    removeRule(grammar, 'binary_operator'); //Vyper uses operators like +, -, *
    removeRule(grammar, 'lambda');
    removeRule(grammar, 'conditional_expression');
    removeRule(grammar, 'keyword_argument');
    removeRule(grammar, 'pair');
    removeRule(grammar, 'expression_list');
    removeRule(grammar, '_collection_elements');
    removeRule(grammar, 'slice');
    removeRule(grammar, 'subscript');
    removeRule(grammar, 'attribute');
    removeRule(grammar, 'list_splat_pattern');
    removeRule(grammar, 'tuple_pattern');
    removeRule(grammar, 'list_pattern');
    removeRule(grammar, 'default_parameter');
    removeRule(grammar, 'typed_default_parameter');
    removeRule(grammar, '_left_hand_side');
    removeRule(grammar, 'pattern');
    removeRule(grammar, 'as_pattern');
    removeRule(grammar, 'assignment');
    removeRule(grammar, 'augmented_assignment');
    removeRule(grammar, 'comparison_operator');
    removeRule(grammar, '_expressions');
    removeRule(grammar, 'return_statement');
    removeRule(grammar, 'delete_statement');
    removeRule(grammar, 'pass_statement');
    removeRule(grammar, 'break_statement');
    removeRule(grammar, 'continue_statement');
    removeRule(grammar, 'list');
    removeRule(grammar, 'set');
    removeRule(grammar, 'tuple');
    removeRule(grammar, 'dictionary');
    removeRule(grammar, 'assert_statement');
    removeRule(grammar, '_right_hand_side');
    removeRule(grammar, 'argument_list');
    removeRule(grammar, 'call');

    return grammar;
};
